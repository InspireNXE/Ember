// Default tasks
defaultTasks 'licenseFormat', 'clean', 'build', 'shadowJar'

// Apply plugin
apply plugin: 'application'
apply plugin: 'cobertura'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'coveralls'
apply plugin: 'java'
apply plugin: 'license'
apply plugin: 'maven'
apply plugin: 'signing'

// Basic project information
group = 'org.obsidianbox'
archivesBaseName = 'ember'
version = '1.0.0-SNAPSHOT'
mainClassName = 'org.obsidianbox.ember.Main'

// Java version target/source compatibility
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// Extended project information
ext.projectName = 'Ember'
ext.inceptionYear = '2014'
ext.currentYear = '2014'
ext.packaging = 'jar'
ext.url = 'http://obsidianbox.org'
ext.description = 'Ember is a voxel engine, built for Java, developed as a hobby project to tackle the unique challenges associated with game development'
ext.organization = 'ObsidianBox'

// Define variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

// Gradle repositories and dependencies
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'sonatype-nexus-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        jcenter()
    }
    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.9.0'
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.5.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.0.2'
    }
}

// Project repositories
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus-public'
        url = 'https://oss.sonatype.org/content/repositories/public/'
    }
}

// Project dependencies
dependencies {
    compile 'com.flowpowered:flow-chat-commands:0.1.0-SNAPSHOT'
    compile 'com.flowpowered:flow-commons:0.1.0-SNAPSHOT'
    compile 'com.flowpowered:flow-events:0.1.0-SNAPSHOT'
    compile 'com.flowpowered:flow-plugins:0.1.0-SNAPSHOT'
    compile 'com.flowpowered:flow-math:0.1.0-SNAPSHOT'
    compile 'com.flowpowered:flow-networking:1.0.0-SNAPSHOT'
    compile 'com.github.wolf480pl:jline-log4j2-appender:1.0.0-SNAPSHOT'
    compile 'net.sf.jopt-simple:jopt-simple:4.6'
    compile 'org.apache.logging.log4j:log4j-api:2.0-rc2'
    compile 'org.apache.logging.log4j:log4j-core:2.0-rc2'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.0-rc2'
    compile 'org.spout:react:1.0.0-SNAPSHOT'
    compile 'junit:junit:4.11'
    testCompile 'junit:junit:4.11'
}

// Include dependencies in the final JAR
shadowJar {
    classifier = ''
    destinationDir = file("build/distributions")
}

// License header formatting
import nl.javadude.gradle.plugins.license.License
tasks.withType(License).each { licenseTask ->
    licenseTask.exclude '**/*.xml'
}
license {
    ext.name = project.name
    ext.organization = organization
    ext.url = url
    ext.year = inceptionYear == currentYear ? inceptionYear : inceptionYear + '-' + currentYear
    header rootProject.file('HEADER.txt')
    ignoreFailures true
    strictCheck true
}

// JAR manifest configuration
jar.manifest.mainAttributes(
        "Main-Class": mainClassName,
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url)

// Coveralls report configuration
cobertura.coverageFormats = [ 'html', 'xml' ]

// Artifact deployment
uploadArchives {
    repositories.mavenDeployer {
        // Javadoc JAR generation
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from 'build/docs/javadoc'
        }

        // Source JAR generation
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.java.srcDirs
        }

        // Set all artifacts
        artifacts {
            archives jar, javadocJar, sourcesJar
        }

        // Tasks and variables based on if release or snapshot
        if (version.endsWith('-SNAPSHOT')) {
            // Set variable to snapshots repository URL
            ext.sonatypeUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
        } else {
            // Set variable to releases repository URL
            ext.sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'

            // Deployment signing
            signing {
                // Check if uploadArchives task is used
                required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }

                // Sign JAR artifacts
                sign configurations.archives

                // Sign Maven POM
                beforeDeployment {
                    org.gradle.api.artifacts.maven.MavenDeployment deployment -> signing.signPom(deployment)
                }
            }
        }

        // Set login credentials for repository
        repository(url: sonatypeUrl) {
            authentication(userName: System.getenv("sonatypeUsername"), password: System.getenv("sonatypePassword"))
        }

        // Maven POM generation
        pom.project {
            name projectName
            artifactId archivesBaseName
            packaging packaging
            inceptionYear inceptionYear
            url url
            description project.ext.description

            scm {
                connection 'scm:git:git://github.com/ObsidianBox/Ember.git'
                developerConnection 'scm:git:ssh://git@github.com:ObsidianBox/Ember.git'
                url 'https://github.com/ObsidianBox/Ember'
            }

            licenses {
                license {
                    name 'The MIT License'
                    url 'http://www.tldrlegal.com/license/mit-license'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'Zidane'
                    name 'Chris Sanders'
                    email 'zidane@outlook.com'
                }
            }

            organization {
                name organization
                url url
            }

            issueManagement {
                system 'github'
                url 'https://github.com/ObsidianBox/Ember/issues'
            }
        }
    }
}
